/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GymJunkieInterface extends utils.Interface {
  contractName: "GymJunkie";
  functions: {
    "BASE_URI()": FunctionFragment;
    "GEN0LIMIT()": FunctionFragment;
    "GEN1LIMIT()": FunctionFragment;
    "MAXIMUM_MINTS_PER_WHITELIST_ADDRESS()": FunctionFragment;
    "NFTS_PER_GAINS_MINT_LEVEL()": FunctionFragment;
    "PROMOTIONAL_NFTS()": FunctionFragment;
    "PUBLIC_PRICE()": FunctionFragment;
    "WHITELISTED_NFTS()": FunctionFragment;
    "WHITELISTED_PRICE()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "avaxMintStarted()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "currentGainsMintCost()": FunctionFragment;
    "forwardERC20s(address,uint256,address)": FunctionFragment;
    "gainsAddress()": FunctionFragment;
    "gainsMintStarted()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "mintNFTWithAVAX(uint256)": FunctionFragment;
    "mintNFTWithGains(uint256)": FunctionFragment;
    "mintPromotional(uint256,address)": FunctionFragment;
    "mintWhitelist(bytes32[],uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nftsMinted()": FunctionFragment;
    "nftsMintedPromotional()": FunctionFragment;
    "nftsMintedWhitelist()": FunctionFragment;
    "nftsMintedWithAvax()": FunctionFragment;
    "nftsMintedWithGains()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setMerkleRoot(bytes32)": FunctionFragment;
    "startAvax()": FunctionFragment;
    "startGains()": FunctionFragment;
    "startWhiteList()": FunctionFragment;
    "stopAvax()": FunctionFragment;
    "stopGains()": FunctionFragment;
    "stopWhiteList()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usersTokenIds(address)": FunctionFragment;
    "whitelistClaimed(address)": FunctionFragment;
    "withdrawAVAX(uint256)": FunctionFragment;
    "wlMintStarted()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BASE_URI", values?: undefined): string;
  encodeFunctionData(functionFragment: "GEN0LIMIT", values?: undefined): string;
  encodeFunctionData(functionFragment: "GEN1LIMIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAXIMUM_MINTS_PER_WHITELIST_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NFTS_PER_GAINS_MINT_LEVEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROMOTIONAL_NFTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLIC_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WHITELISTED_NFTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WHITELISTED_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "avaxMintStarted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "currentGainsMintCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forwardERC20s",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "gainsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gainsMintStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFTWithAVAX",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFTWithGains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPromotional",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWhitelist",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftsMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftsMintedPromotional",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftsMintedWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftsMintedWithAvax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftsMintedWithGains",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "startAvax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startGains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startWhiteList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stopAvax", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopGains", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stopWhiteList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usersTokenIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistClaimed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAVAX",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wlMintStarted",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BASE_URI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GEN0LIMIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GEN1LIMIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAXIMUM_MINTS_PER_WHITELIST_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NFTS_PER_GAINS_MINT_LEVEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROMOTIONAL_NFTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBLIC_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WHITELISTED_NFTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WHITELISTED_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "avaxMintStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentGainsMintCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardERC20s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gainsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gainsMintStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintNFTWithAVAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNFTWithGains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPromotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftsMinted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftsMintedPromotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftsMintedWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftsMintedWithAvax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftsMintedWithGains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startAvax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopAvax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopGains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stopWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usersTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAVAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wlMintStarted",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "onGymJunkieCreated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onGymJunkieCreated"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type onGymJunkieCreatedEvent = TypedEvent<
  [BigNumber],
  { tokenId: BigNumber }
>;

export type onGymJunkieCreatedEventFilter =
  TypedEventFilter<onGymJunkieCreatedEvent>;

export interface GymJunkie extends BaseContract {
  contractName: "GymJunkie";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GymJunkieInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_URI(overrides?: CallOverrides): Promise<[string]>;

    GEN0LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    GEN1LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAXIMUM_MINTS_PER_WHITELIST_ADDRESS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    NFTS_PER_GAINS_MINT_LEVEL(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROMOTIONAL_NFTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PUBLIC_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    WHITELISTED_NFTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    WHITELISTED_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    avaxMintStarted(overrides?: CallOverrides): Promise<[boolean]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    currentGainsMintCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    forwardERC20s(
      _token: string,
      _amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gainsAddress(overrides?: CallOverrides): Promise<[string]>;

    gainsMintStarted(overrides?: CallOverrides): Promise<[boolean]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    mintNFTWithAVAX(
      qty: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintNFTWithGains(
      qty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPromotional(
      qty: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWhitelist(
      _merkleProof: BytesLike[],
      qty: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftsMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftsMintedPromotional(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftsMintedWhitelist(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftsMintedWithAvax(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftsMintedWithGains(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _BASE_URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startAvax(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startGains(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startWhiteList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopAvax(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopGains(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopWhiteList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usersTokenIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    whitelistClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawAVAX(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wlMintStarted(overrides?: CallOverrides): Promise<[boolean]>;
  };

  BASE_URI(overrides?: CallOverrides): Promise<string>;

  GEN0LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  GEN1LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  MAXIMUM_MINTS_PER_WHITELIST_ADDRESS(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  NFTS_PER_GAINS_MINT_LEVEL(overrides?: CallOverrides): Promise<BigNumber>;

  PROMOTIONAL_NFTS(overrides?: CallOverrides): Promise<BigNumber>;

  PUBLIC_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  WHITELISTED_NFTS(overrides?: CallOverrides): Promise<BigNumber>;

  WHITELISTED_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  avaxMintStarted(overrides?: CallOverrides): Promise<boolean>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  currentGainsMintCost(overrides?: CallOverrides): Promise<BigNumber>;

  forwardERC20s(
    _token: string,
    _amount: BigNumberish,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gainsAddress(overrides?: CallOverrides): Promise<string>;

  gainsMintStarted(overrides?: CallOverrides): Promise<boolean>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  mintNFTWithAVAX(
    qty: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintNFTWithGains(
    qty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPromotional(
    qty: BigNumberish,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWhitelist(
    _merkleProof: BytesLike[],
    qty: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nftsMinted(overrides?: CallOverrides): Promise<BigNumber>;

  nftsMintedPromotional(overrides?: CallOverrides): Promise<BigNumber>;

  nftsMintedWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

  nftsMintedWithAvax(overrides?: CallOverrides): Promise<BigNumber>;

  nftsMintedWithGains(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _BASE_URI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startAvax(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startGains(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startWhiteList(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopAvax(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopGains(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopWhiteList(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usersTokenIds(user: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  whitelistClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdrawAVAX(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wlMintStarted(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    BASE_URI(overrides?: CallOverrides): Promise<string>;

    GEN0LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    GEN1LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_MINTS_PER_WHITELIST_ADDRESS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    NFTS_PER_GAINS_MINT_LEVEL(overrides?: CallOverrides): Promise<BigNumber>;

    PROMOTIONAL_NFTS(overrides?: CallOverrides): Promise<BigNumber>;

    PUBLIC_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    WHITELISTED_NFTS(overrides?: CallOverrides): Promise<BigNumber>;

    WHITELISTED_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    avaxMintStarted(overrides?: CallOverrides): Promise<boolean>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentGainsMintCost(overrides?: CallOverrides): Promise<BigNumber>;

    forwardERC20s(
      _token: string,
      _amount: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    gainsAddress(overrides?: CallOverrides): Promise<string>;

    gainsMintStarted(overrides?: CallOverrides): Promise<boolean>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    mintNFTWithAVAX(
      qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintNFTWithGains(
      qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintPromotional(
      qty: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintWhitelist(
      _merkleProof: BytesLike[],
      qty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nftsMinted(overrides?: CallOverrides): Promise<BigNumber>;

    nftsMintedPromotional(overrides?: CallOverrides): Promise<BigNumber>;

    nftsMintedWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    nftsMintedWithAvax(overrides?: CallOverrides): Promise<BigNumber>;

    nftsMintedWithGains(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_BASE_URI: string, overrides?: CallOverrides): Promise<void>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    startAvax(overrides?: CallOverrides): Promise<void>;

    startGains(overrides?: CallOverrides): Promise<void>;

    startWhiteList(overrides?: CallOverrides): Promise<void>;

    stopAvax(overrides?: CallOverrides): Promise<void>;

    stopGains(overrides?: CallOverrides): Promise<void>;

    stopWhiteList(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usersTokenIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    whitelistClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAVAX(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wlMintStarted(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "onGymJunkieCreated(uint256)"(
      tokenId?: null
    ): onGymJunkieCreatedEventFilter;
    onGymJunkieCreated(tokenId?: null): onGymJunkieCreatedEventFilter;
  };

  estimateGas: {
    BASE_URI(overrides?: CallOverrides): Promise<BigNumber>;

    GEN0LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    GEN1LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_MINTS_PER_WHITELIST_ADDRESS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    NFTS_PER_GAINS_MINT_LEVEL(overrides?: CallOverrides): Promise<BigNumber>;

    PROMOTIONAL_NFTS(overrides?: CallOverrides): Promise<BigNumber>;

    PUBLIC_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    WHITELISTED_NFTS(overrides?: CallOverrides): Promise<BigNumber>;

    WHITELISTED_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    avaxMintStarted(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentGainsMintCost(overrides?: CallOverrides): Promise<BigNumber>;

    forwardERC20s(
      _token: string,
      _amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gainsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    gainsMintStarted(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    mintNFTWithAVAX(
      qty: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintNFTWithGains(
      qty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPromotional(
      qty: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWhitelist(
      _merkleProof: BytesLike[],
      qty: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftsMinted(overrides?: CallOverrides): Promise<BigNumber>;

    nftsMintedPromotional(overrides?: CallOverrides): Promise<BigNumber>;

    nftsMintedWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    nftsMintedWithAvax(overrides?: CallOverrides): Promise<BigNumber>;

    nftsMintedWithGains(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _BASE_URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startAvax(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startGains(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startWhiteList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopAvax(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopGains(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopWhiteList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usersTokenIds(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAVAX(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wlMintStarted(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_URI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GEN0LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GEN1LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXIMUM_MINTS_PER_WHITELIST_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NFTS_PER_GAINS_MINT_LEVEL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROMOTIONAL_NFTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PUBLIC_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WHITELISTED_NFTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WHITELISTED_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    avaxMintStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentGainsMintCost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forwardERC20s(
      _token: string,
      _amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gainsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gainsMintStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintNFTWithAVAX(
      qty: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintNFTWithGains(
      qty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPromotional(
      qty: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWhitelist(
      _merkleProof: BytesLike[],
      qty: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftsMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftsMintedPromotional(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftsMintedWhitelist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftsMintedWithAvax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftsMintedWithGains(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _BASE_URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startAvax(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startGains(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startWhiteList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopAvax(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopGains(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopWhiteList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usersTokenIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAVAX(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wlMintStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
